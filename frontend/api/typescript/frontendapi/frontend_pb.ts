// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file frontendapi/frontend.proto (package frontendapi, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * The settings for a user.
 *
 * @generated from message frontendapi.User
 */
export class User extends Message<User> {
  /**
   * IDs of programming languages that reviews can be created for.
   * IDs correspond to `language_id` from github-linguist.
   * https://github.com/github-linguist/linguist/blob/master/lib/linguist/languages.yml
   * Required.
   *
   * @generated from field: repeated uint32 programming_language_ids = 1;
   */
  programmingLanguageIds: number[] = [];

  /**
   * The maximum number of reviews created by the app that can be open at once.
   * Required.
   *
   * @generated from field: uint32 max_open_reviews = 2;
   */
  maxOpenReviews = 0;

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "frontendapi.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "programming_language_ids",
      kind: "scalar",
      T: 13 /* ScalarType.UINT32 */,
      repeated: true,
    },
    {
      no: 2,
      name: "max_open_reviews",
      kind: "scalar",
      T: 13 /* ScalarType.UINT32 */,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(
    a: User | PlainMessage<User> | undefined,
    b: User | PlainMessage<User> | undefined,
  ): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * A request for FrontendService.GetUser.
 *
 * @generated from message frontendapi.GetUserRequest
 */
export class GetUserRequest extends Message<GetUserRequest> {
  constructor(data?: PartialMessage<GetUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "frontendapi.GetUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetUserRequest {
    return new GetUserRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetUserRequest {
    return new GetUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetUserRequest {
    return new GetUserRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetUserRequest | PlainMessage<GetUserRequest> | undefined,
    b: GetUserRequest | PlainMessage<GetUserRequest> | undefined,
  ): boolean {
    return proto3.util.equals(GetUserRequest, a, b);
  }
}

/**
 * A response for FrontendService.GetUser.
 *
 * @generated from message frontendapi.GetUserResponse
 */
export class GetUserResponse extends Message<GetUserResponse> {
  /**
   * The user information.
   * Required.
   *
   * @generated from field: frontendapi.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<GetUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "frontendapi.GetUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GetUserResponse {
    return new GetUserResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GetUserResponse {
    return new GetUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GetUserResponse {
    return new GetUserResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: GetUserResponse | PlainMessage<GetUserResponse> | undefined,
    b: GetUserResponse | PlainMessage<GetUserResponse> | undefined,
  ): boolean {
    return proto3.util.equals(GetUserResponse, a, b);
  }
}

/**
 * A request for FrontendService.SaveUser.
 *
 * @generated from message frontendapi.SaveUserRequest
 */
export class SaveUserRequest extends Message<SaveUserRequest> {
  /**
   * The user to create.
   * Required.
   *
   * @generated from field: frontendapi.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<SaveUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "frontendapi.SaveUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SaveUserRequest {
    return new SaveUserRequest().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SaveUserRequest {
    return new SaveUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SaveUserRequest {
    return new SaveUserRequest().fromJsonString(jsonString, options);
  }

  static equals(
    a: SaveUserRequest | PlainMessage<SaveUserRequest> | undefined,
    b: SaveUserRequest | PlainMessage<SaveUserRequest> | undefined,
  ): boolean {
    return proto3.util.equals(SaveUserRequest, a, b);
  }
}

/**
 * A response for FrontendService.SaveUser.
 *
 * Empty to allow future extension.
 *
 * @generated from message frontendapi.SaveUserResponse
 */
export class SaveUserResponse extends Message<SaveUserResponse> {
  constructor(data?: PartialMessage<SaveUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "frontendapi.SaveUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): SaveUserResponse {
    return new SaveUserResponse().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): SaveUserResponse {
    return new SaveUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): SaveUserResponse {
    return new SaveUserResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: SaveUserResponse | PlainMessage<SaveUserResponse> | undefined,
    b: SaveUserResponse | PlainMessage<SaveUserResponse> | undefined,
  ): boolean {
    return proto3.util.equals(SaveUserResponse, a, b);
  }
}
