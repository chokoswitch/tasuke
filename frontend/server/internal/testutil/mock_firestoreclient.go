// Code generated by mockery v2.43.0. DO NOT EDIT.

package testutil

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockFirestoreClient is an autogenerated mock type for the Client type
type MockFirestoreClient[T interface{}] struct {
	mock.Mock
}

type MockFirestoreClient_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *MockFirestoreClient[T]) EXPECT() *MockFirestoreClient_Expecter[T] {
	return &MockFirestoreClient_Expecter[T]{mock: &_m.Mock}
}

// GetDocument provides a mock function with given fields: ctx, path
func (_m *MockFirestoreClient[T]) GetDocument(ctx context.Context, path string) (*T, error) {
	ret := _m.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for GetDocument")
	}

	var r0 *T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*T, error)); ok {
		return rf(ctx, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *T); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFirestoreClient_GetDocument_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDocument'
type MockFirestoreClient_GetDocument_Call[T interface{}] struct {
	*mock.Call
}

// GetDocument is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockFirestoreClient_Expecter[T]) GetDocument(ctx interface{}, path interface{}) *MockFirestoreClient_GetDocument_Call[T] {
	return &MockFirestoreClient_GetDocument_Call[T]{Call: _e.mock.On("GetDocument", ctx, path)}
}

func (_c *MockFirestoreClient_GetDocument_Call[T]) Run(run func(ctx context.Context, path string)) *MockFirestoreClient_GetDocument_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockFirestoreClient_GetDocument_Call[T]) Return(_a0 *T, _a1 error) *MockFirestoreClient_GetDocument_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFirestoreClient_GetDocument_Call[T]) RunAndReturn(run func(context.Context, string) (*T, error)) *MockFirestoreClient_GetDocument_Call[T] {
	_c.Call.Return(run)
	return _c
}

// SetDocument provides a mock function with given fields: ctx, path, data
func (_m *MockFirestoreClient[T]) SetDocument(ctx context.Context, path string, data *T) error {
	ret := _m.Called(ctx, path, data)

	if len(ret) == 0 {
		panic("no return value specified for SetDocument")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *T) error); ok {
		r0 = rf(ctx, path, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFirestoreClient_SetDocument_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDocument'
type MockFirestoreClient_SetDocument_Call[T interface{}] struct {
	*mock.Call
}

// SetDocument is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - data *T
func (_e *MockFirestoreClient_Expecter[T]) SetDocument(ctx interface{}, path interface{}, data interface{}) *MockFirestoreClient_SetDocument_Call[T] {
	return &MockFirestoreClient_SetDocument_Call[T]{Call: _e.mock.On("SetDocument", ctx, path, data)}
}

func (_c *MockFirestoreClient_SetDocument_Call[T]) Run(run func(ctx context.Context, path string, data *T)) *MockFirestoreClient_SetDocument_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*T))
	})
	return _c
}

func (_c *MockFirestoreClient_SetDocument_Call[T]) Return(_a0 error) *MockFirestoreClient_SetDocument_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFirestoreClient_SetDocument_Call[T]) RunAndReturn(run func(context.Context, string, *T) error) *MockFirestoreClient_SetDocument_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockFirestoreClient creates a new instance of MockFirestoreClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFirestoreClient[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFirestoreClient[T] {
	mock := &MockFirestoreClient[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
